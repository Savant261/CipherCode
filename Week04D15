1. 

#include <iostream>
using namespace std;

class Student {
private:
    string name;
    int rollNo;
    int age;

public:
    Student(string studentName, int studentRollNo, int studentAge) {
        name = studentName;
        rollNo = studentRollNo;
        age = studentAge;
    }

    void displayDetails() {
        cout << "Student Name: " << this->name << endl;
        cout << "Roll Number: " << this->rollNo << endl;
        cout << "Age: " << this->age << endl;
    }
};

int main() {
    Student student1("John Doe", 101, 20);
    student1.displayDetails();

    return 0;
}

2. 

#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int val) {
        data = val;
        next = nullptr;
    }
};

void deleteValue(Node*& head, int value) {
    if (head == nullptr) {
        return;
    }

    if (head->data == value) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    Node* current = head;
    while (current->next != nullptr && current->next->data != value) {
        current = current->next;
    }

    if (current->next != nullptr) {
        Node* temp = current->next;
        current->next = current->next->next;
        delete temp;
    }
}

void insertAtEnd(Node*& head, int val) {
    Node* newNode = new Node(val);
    if (head == nullptr) {
        head = newNode;
        return;
    }
    Node* temp = head;
    while (temp->next != nullptr) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void displayList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data;
        if (temp->next != nullptr)
            cout << "->";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    Node* head = nullptr;

    // Insert values into the linked list
    insertAtEnd(head, 10);
    insertAtEnd(head, 20);
    insertAtEnd(head, 30);
    insertAtEnd(head, 40);

    cout << "Original List: ";
    displayList(head);

    int valueToDelete = 20;
    cout << "Deleting value: " << valueToDelete << endl;
    
    deleteValue(head, valueToDelete);

    cout << "Updated List: ";
    displayList(head);

    return 0;
}
